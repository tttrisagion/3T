@startuml Adaptive Trade Lifecycle

!include <C4/C4_Sequence.puml>

LAYOUT_WITH_LEGEND()

title Dynamic Diagram: Adaptive Trade Lifecycle

System_Ext(hyperliquid_ws, "HyperLiquid WebSocket")
Container(price_stream_producer, "Price Stream Producer")
ContainerDb(redis_streams, "Redis Streams")
Container(celery_worker, "Celery Worker", "Hosts Optimization and Trading Engines")
ContainerDb(db, "Database")
Container(order_gateway, "Order Gateway")
System_Ext(hyperliquid_api, "HyperLiquid REST API")

hyperliquid_ws -> price_stream_producer: 1. Real-time trade event
price_stream_producer -> redis_streams: 2. Publishes price to stream
redis_streams --> celery_worker: 3. Optimization Engine consumes price for continuous, parallel simulations to find best parameters

== Trading Decision ==
celery_worker -> db: 4. Trade Engine reads historical data for market analysis
celery_worker -> celery_worker: 5. Calculates Permutation Entropy to check for 'trending' market
note right
  If market is 'noisy',
  the cycle ends here.
end note
celery_worker -> celery_worker: 6. Applies entry logic (e.g., Breakout) and performance-based sizing heuristic
celery_worker -> order_gateway: 7. Sends trade instruction
order_gateway -> hyperliquid_api: 8. Places order on exchange
hyperliquid_api --> order_gateway: 9. Confirms order placement

@enduml
