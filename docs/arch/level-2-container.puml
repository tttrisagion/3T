@startuml Trisagion System Containers
!include <C4/C4_Container.puml>

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/python.puml
!include DEVICONS/redis.puml
!include DEVICONS/postgresql.puml
!include FONTAWESOME/user_shield.puml
!include FONTAWESOME/cogs.puml
!include FONTAWESOME/database.puml
!include FONTAWESOME/tasks.puml
!include FONTAWESOME/file_alt.puml
!include FONTAWESOME/clock.puml

LAYOUT_WITH_LEGEND()
LAYOUT_TOP_DOWN()

title Container Diagram for Trisagion Algorithmic Trading System (Refactored)

Person(developer, "Developer", "Develops and maintains the trading system.", $sprite="user_shield")
System_Ext(hyperliquid, "HyperLiquid Exchange", "Provides market data and trade execution.", $sprite="building")

System_Boundary(trisagion_system, "Trisagion Trading System") {

    Container(celery_worker, "Celery Worker", "Celery", "Executes asynchronous tasks, including the balance updater.", $sprite="cogs")
    Container(celery_beat, "Celery Beat", "Celery", "Schedules periodic tasks, triggering the balance updater.", $sprite="clock")
    ContainerDb(redis, "Redis", "Redis", "Acts as a message broker, key-value store, and event stream.", $sprite="redis")
    ContainerDb(mariadb, "MariaDB", "MariaDB", "Stores product, position, and balance data.", $sprite="database")
    
    Container(config, "config.yml", "YAML", "Stores non-sensitive configuration.", $sprite="file_alt")
    Container(secrets, "secrets.yml", "YAML", "Stores API keys and other secrets.", $sprite="file_alt")

    Container(flower, "Flower", "Flower", "Web-based tool for monitoring and administrating Celery jobs.", $sprite="tasks")
    Container(prometheus, "Prometheus", "Prometheus", "Collects metrics from Flower and other services.", $sprite="cogs")
    Container(grafana, "Grafana", "Grafana", "Visualizes metrics.", $sprite="cogs")
    Container(jaeger, "Jaeger", "Jaeger", "Distributed Tracing.", $sprite="cogs")
    Container(otel_collector, "OpenTelemetry Collector", "OpenTelemetry Collector", "Receives and exports telemetry data.", $sprite="cogs")

    Rel(developer, celery_worker, "Manages and develops")
    Rel(developer, celery_beat, "Configures")
    Rel(developer, flower, "Monitors")
    
    Rel(celery_beat, celery_worker, "Schedules tasks for", "Celery")
    
    Rel(celery_worker, redis, "Uses as message broker and for event streams", "TCP/IP")
    Rel(celery_worker, mariadb, "Reads product data and writes balance/position data", "TCP/IP")
    Rel(celery_worker, hyperliquid, "Connects to", "HTTPS")
    Rel(celery_worker, config, "Reads config from", "File I/O")
    Rel(celery_worker, secrets, "Reads secrets from", "File I/O")
    
    Rel(flower, redis, "Monitors", "TCP/IP")
    Rel(flower, celery_worker, "Monitors", "Celery")

    Rel(prometheus, flower, "Scrapes metrics from", "HTTP")
    Rel(grafana, prometheus, "Queries metrics from", "HTTP")
    Rel(grafana, mariadb, "Queries balance and position data from", "SQL")
    Rel(otel_collector, jaeger, "Exports traces to", "gRPC")
    Rel(celery_worker, otel_collector, "Sends traces to", "gRPC")
    Rel(celery_beat, otel_collector, "Sends traces to", "gRPC")
}

@enduml
