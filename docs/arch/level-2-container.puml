@startuml Trisagion System Containers
!include <C4/C4_Container.puml>

LAYOUT_WITH_LEGEND()
LAYOUT_TOP_DOWN()

title Container Diagram for Trisagion Algorithmic Trading System

Person(developer, "Developer", "Develops and maintains the trading system.")
System_Ext(hyperliquid, "HyperLiquid Exchange", "Provides market data and trade execution.")

System_Boundary(trisagion_system, "Trisagion Trading System") {

    System_Boundary(celery_services, "Celery Services") {
        Container(celery_worker, "Worker", "Python/Celery", "Executes asynchronous tasks: balance updates, market data fetching, trading range calculations and portfolio reconciliation.")
        Container(celery_beat, "Beat", "Python/Celery", "Schedules periodic tasks based on config.yml.")
    }
    
    System_Boundary(streaming_components, "Real-time Components") {
        Container(balance_consumer, "Balance Consumer", "Python/Redis", "Consumes balance update events from Redis stream and logs them.")
        Container(price_producer, "Price Poll Producer", "Python/HTTP", "Polls real-time prices from HyperLiquid to Redis via HTTP.")
        Container(price_consumer, "Price Stream Consumer", "Python/Redis", "Consumes price updates from Redis stream for downstream processing.")
        Container(cors_proxy, "CORS Proxy", "CORS Anywhere", "Bypasses IP restrictions and DDOS protection on exchange APIs.")
    }

    System_Boundary(trading_gateway, "Trading Gateway") {
        Container(order_gateway, "Order Gateway", "FastAPI/Python", "Secure, idempotent order execution service with duplicate detection and retry logic.")
    }

    System_Boundary(monitoring_services, "External Monitoring") {
        Container(exchange_observer, "Exchange Observer", "FastAPI/Python", "Standalone service that monitors HyperLiquid wallet positions and provides REST API access.")
    }

    ContainerDb(redis, "Redis", "Redis", "Acts as a message broker for Celery and a key-value cache for market data state. Provides streams for balance and price updates.")
    ContainerDb(mariadb, "MariaDB", "MariaDB", "Stores product, position, balance, and market data (OHLCV).")
    
    System_Boundary(observability, "Observability") {
        Container(flower, "Flower", "Flower", "Web tool for monitoring Celery jobs.")
        Container(prometheus, "Prometheus", "Prometheus", "Collects and stores metrics.")
        Container(grafana, "Grafana", "Grafana", "Visualizes metrics and logs.")
        ContainerDb(elasticsearch, "Elasticsearch", "Elasticsearch", "Search engine providing persistent storage for trace data.")
        Container(jaeger, "Jaeger", "Jaeger", "Distributed tracing system with Elasticsearch backend.")
        Container(kibana, "Kibana", "Kibana", "Web interface for exploring trace data in Elasticsearch.")
        Container(kibana_setup, "Kibana Setup", "Shell/Curl", "Automated service that creates index patterns for Jaeger data.")
        Container(otel_collector, "OpenTelemetry Collector", "OTel", "Receives, processes, and exports telemetry data.")
    }

    Rel(developer, celery_services, "Manages and develops")
    Rel(developer, streaming_components, "Manages and develops")
    Rel(developer, trading_gateway, "Manages and develops")
    Rel(developer, monitoring_services, "Manages and develops")
    Rel(developer, flower, "Monitors")
    Rel(developer, grafana, "Views dashboards on")
    Rel(developer, jaeger, "Views traces on")
    Rel(developer, kibana, "Explores trace data on")
    
    Rel(celery_beat, celery_worker, "Schedules tasks for", "Celery")
    
    Rel(celery_worker, redis, "Uses as message broker and for stateful market data fetching", "TCP/IP")
    Rel_D(celery_worker, redis, "Publishes balance updates to", "XADD")
    Rel(celery_worker, mariadb, "Reads/writes trading data and calculated trading ranges", "SQL/TCP")
    Rel(celery_worker, hyperliquid, "Fetches market data & executes trades", "HTTPS")
    Rel(celery_worker, order_gateway, "Sends reconciliation orders to", "HTTP")
    Rel(celery_worker, exchange_observer, "Gets position consensus from", "HTTP")
    
    Rel(price_producer, cors_proxy, "Routes requests through", "HTTPS")
    Rel(cors_proxy, hyperliquid, "Forwards requests to", "HTTPS")
    Rel(price_producer, redis, "Publishes price updates to", "XADD")
    Rel(price_producer, mariadb, "Reads supported instruments from", "SQL/TCP")
    
    Rel(balance_consumer, redis, "Consumes balance updates from", "XREADGROUP")
    Rel(price_consumer, redis, "Consumes price updates from", "XREADGROUP")
    Rel_Back(balance_consumer, celery_worker, "Is decoupled from by Redis")
    Rel_Back(price_consumer, price_producer, "Is decoupled from by Redis")

    Rel(order_gateway, mariadb, "Logs order execution and checks for duplicates", "SQL/TCP")
    Rel(order_gateway, redis, "Gets latest prices from", "Redis streams")
    Rel(order_gateway, hyperliquid, "Executes orders via", "HTTPS")
    Rel(order_gateway, otel_collector, "Sends traces to", "gRPC")

    Rel(exchange_observer, hyperliquid, "Monitors wallet positions via", "HTTPS")

    Rel(flower, redis, "Monitors queue", "TCP/IP")
    Rel(flower, celery_worker, "Monitors workers", "Celery")

    Rel(prometheus, flower, "Scrapes metrics from", "HTTP")
    Rel(grafana, prometheus, "Queries metrics from", "HTTP")
    Rel(grafana, mariadb, "Queries data from", "SQL")

    Rel(celery_worker, otel_collector, "Sends traces to", "gRPC")
    Rel(celery_beat, otel_collector, "Sends traces to", "gRPC")
    Rel(balance_consumer, otel_collector, "Sends traces to", "gRPC")
    Rel(price_producer, otel_collector, "Sends traces to", "gRPC")
    Rel(price_consumer, otel_collector, "Sends traces to", "gRPC")
    Rel(otel_collector, jaeger, "Exports traces to", "gRPC")
    Rel(jaeger, elasticsearch, "Stores traces in", "HTTP/REST")
    Rel(kibana, elasticsearch, "Queries trace data from", "HTTP/REST")
    Rel(kibana_setup, kibana, "Creates index patterns in", "HTTP/REST")
    Rel(kibana_setup, elasticsearch, "Waits for indices from", "HTTP/REST")
}

@enduml
