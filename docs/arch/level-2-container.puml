@startuml Trisagion System Containers
!include <C4/C4_Container.puml>

!define DEVICONS https://raw.githubusercontent.com/tttrisagion/plantuml-icon-font-sprites/refs/heads/main/icons/devicons
!define FONTAWESOME https://github.com/tttrisagion/plantuml-icon-font-sprites/blob/main/icons/font-awesome-6
!include FONTAWESOME/user_shield.puml
!include FONTAWESOME/cogs.puml
!include FONTAWESOME/database.puml
!include FONTAWESOME/tasks.puml
!include FONTAWESOME/clock.puml
!include FONTAWESOME/line_chart.puml
!include FONTAWESOME/search.puml

LAYOUT_WITH_LEGEND()
LAYOUT_TOP_DOWN()

title Container Diagram for Trisagion Algorithmic Trading System

Person(developer, "Developer", "Develops and maintains the trading system.", $sprite="user_shield")
System_Ext(hyperliquid, "HyperLiquid Exchange", "Provides market data and trade execution.", $sprite="building")

System_Boundary(trisagion_system, "Trisagion Trading System") {

    System_Boundary(celery_services, "Celery Services") {
        Container(celery_worker, "Worker", "Python/Celery", "Executes asynchronous tasks: balance updates and market data fetching for configured symbols.", $sprite="cogs")
        Container(celery_beat, "Beat", "Python/Celery", "Schedules periodic tasks based on config.yml.", $sprite="clock")
    }
    
    Container(components, "Balance Consumer", "Python/Redis", "Consumes balance update events from Redis stream and logs them." )

    ContainerDb(redis, "Redis", "Redis", "Acts as a message broker for Celery and a key-value cache for market data state. Provides a stream for balance updates.")
    ContainerDb(mariadb, "MariaDB", "MariaDB", "Stores product, position, balance, and market data (OHLCV).", $sprite="database")
    
    System_Boundary(observability, "Observability") {
        Container(flower, "Flower", "Flower", "Web tool for monitoring Celery jobs.", $sprite="tasks")
        Container(prometheus, "Prometheus", "Prometheus", "Collects and stores metrics.", $sprite="line_chart")
        Container(grafana, "Grafana", "Grafana", "Visualizes metrics and logs.", $sprite="line_chart")
        Container(jaeger, "Jaeger", "Jaeger", "Distributed Tracing.", $sprite="search")
        Container(otel_collector, "OpenTelemetry Collector", "OTel", "Receives, processes, and exports telemetry data.", $sprite="cogs")
    }

    Rel(developer, celery_services, "Manages and develops")
    Rel(developer, components, "Manages and develops")
    Rel(developer, flower, "Monitors")
    Rel(developer, grafana, "Views dashboards on")
    
    Rel(celery_beat, celery_worker, "Schedules tasks for", "Celery")
    
    Rel(celery_worker, redis, "Uses as message broker and for stateful market data fetching", "TCP/IP")
    Rel_D(celery_worker, redis, "Publishes balance updates to", "XADD")
    Rel(celery_worker, mariadb, "Reads/writes trading data", "SQL/TCP")
    Rel(celery_worker, hyperliquid, "Fetches market data & executes trades", "HTTPS")
    
    Rel(components, redis, "Consumes balance updates from", "XREADGROUP")
    Rel_Back(components, celery_worker, "Is decoupled from by Redis")

    Rel(flower, redis, "Monitors queue", "TCP/IP")
    Rel(flower, celery_worker, "Monitors workers", "Celery")

    Rel(prometheus, flower, "Scrapes metrics from", "HTTP")
    Rel(grafana, prometheus, "Queries metrics from", "HTTP")
    Rel(grafana, mariadb, "Queries data from", "SQL")

    Rel(celery_worker, otel_collector, "Sends traces to", "gRPC")
    Rel(celery_beat, otel_collector, "Sends traces to", "gRPC")
    Rel(components, otel_collector, "Sends traces to", "gRPC")
    Rel(otel_collector, jaeger, "Exports traces to", "gRPC")
}

@enduml
