@startuml Development Deployment

!include <C4/C4_Deployment.puml>

LAYOUT_WITH_LEGEND()

title Deployment Diagram for Trisagion System (Development Environment)

Deployment_Node(developer_machine, "Developer Machine", "Docker Desktop") {
    Deployment_Node(docker, "Docker", "Container Engine") {
        Container(balance_consumer, "Balance Consumer", "Docker Container")
        Container(price_stream_producer, "Price Stream Producer", "Docker Container")
        Container(price_stream_consumer, "Price Stream Consumer", "Docker Container")
        Container(celery_worker, "Celery Worker", "Docker Container")
        Container(celery_beat, "Celery Beat", "Docker Container")
        Container(order_gateway, "Order Gateway", "Docker Container")
        Container(exchange_observer, "Exchange Observer", "Docker Container")
        Container(redis, "Redis", "Docker Container")
        Container(flower, "Flower", "Docker Container")
        Container(prometheus, "Prometheus", "Docker Container")
        Container(grafana, "Grafana", "Docker Container")
        Container(jaeger, "Jaeger", "Docker Container")
        Container(otel_collector, "OpenTelemetry Collector", "Docker Container")
        Container(mariadb, "MariaDB", "Docker Container")
    }
}

System_Ext(hyperliquid, "HyperLiquid Exchange")

Rel(price_stream_producer, hyperliquid, "WebSocket connection", "WSS")
Rel(celery_worker, hyperliquid, "REST API calls", "HTTPS")
Rel(order_gateway, hyperliquid, "Order execution", "HTTPS")
Rel(exchange_observer, hyperliquid, "Position monitoring", "HTTPS")
Rel(celery_worker, redis, "Message broker", "TCP/IP")
Rel(balance_consumer, redis, "Stream consumer", "TCP/IP")
Rel(price_stream_producer, redis, "Stream publisher", "TCP/IP")
Rel(price_stream_consumer, redis, "Stream consumer", "TCP/IP")
Rel(order_gateway, redis, "Price data access", "TCP/IP")
Rel(flower, redis, "Monitoring", "TCP/IP")
Rel(prometheus, flower, "Scrapes metrics from", "HTTP")
Rel(grafana, prometheus, "Queries metrics from", "HTTP")
Rel(celery_worker, mariadb, "Data storage", "TCP/IP")
Rel(order_gateway, mariadb, "Order logging", "TCP/IP")
Rel(price_stream_producer, mariadb, "Instrument queries", "TCP/IP")

Rel(otel_collector, jaeger, "Exports traces to", "gRPC")
Rel(balance_consumer, otel_collector, "Sends traces to", "gRPC")
Rel(price_stream_producer, otel_collector, "Sends traces to", "gRPC")
Rel(price_stream_consumer, otel_collector, "Sends traces to", "gRPC")
Rel(celery_worker, otel_collector, "Sends traces to", "gRPC")
Rel(order_gateway, otel_collector, "Sends traces to", "gRPC")

@enduml
