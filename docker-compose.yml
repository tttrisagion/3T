services:
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"

  celery_worker:
    build:
      context: .
      dockerfile: celery-services/Dockerfile
    command: celery -A worker.tasks worker -P eventlet --loglevel=info --autoscale=600,10
    volumes:
      - ./celery-services/worker:/app/worker
      - ./shared:/app/shared
      - ./config.yml:/app/config.yml
      - ./secrets.yml:/app/secrets.yml
      - ./exchange-observer/data:/app/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    environment:
      - PYTHONPATH=/app
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_SERVICE_NAME=celery_worker
    healthcheck:
      test: ["CMD", "python", "-c", "from shared.exchange_manager import exchange_manager; exchange_manager.get_exchange()"]
      interval: 300s
      timeout: 30s
      retries: 3
      start_period: 60s
    depends_on:
      - redis
      - mariadb

  celery_beat:
    build:
      context: .
      dockerfile: celery-services/Dockerfile
    command: celery -A worker.tasks beat --loglevel=info
    volumes:
      - ./celery-services/worker:/app/worker
      - ./shared:/app/shared
      - ./config.yml:/app/config.yml
      - ./secrets.yml:/app/secrets.yml
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    environment:
      - PYTHONPATH=/app
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_SERVICE_NAME=celery_beat
    depends_on:
      - redis
      - mariadb

  balance_consumer:
    build:
      context: .
      dockerfile: components/Dockerfile
    command: python src/example_balance_consumer.py
    volumes:
      - ./components/src:/app/src
      - ./shared:/app/shared
      - ./config.yml:/app/config.yml
      - ./secrets.yml:/app/secrets.yml
    environment:
      - PYTHONPATH=/app
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_SERVICE_NAME=balance_consumer
    depends_on:
      - redis
      - celery_worker

  take-profit:
    build:
      context: .
      dockerfile: components/Dockerfile
    command: python src/take_profit.py
    volumes:
      - ./components/src:/app/src
      - ./shared:/app/shared
      - ./config.yml:/app/config.yml
      - ./secrets.yml:/app/secrets.yml
    environment:
      - PYTHONPATH=/app
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_SERVICE_NAME=take_profit
    depends_on:
      - redis
      - mariadb

  price_stream_producer:
    build:
      context: .
      dockerfile: components/Dockerfile
    command: python src/price_poll_producer.py
    volumes:
      - ./components/src:/app/src
      - ./shared:/app/shared
      - ./config.yml:/app/config.yml
      - ./secrets.yml:/app/secrets.yml
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_SERVICE_NAME=price_stream_producer
    depends_on:
      - redis
      - mariadb

  price_stream_consumer:
    build:
      context: .
      dockerfile: components/Dockerfile
    command: python src/price_stream_consumer.py
    volumes:
      - ./components/src:/app/src
      - ./shared:/app/shared
      - ./config.yml:/app/config.yml
      - ./secrets.yml:/app/secrets.yml
    environment:
      - PYTHONPATH=/app
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_SERVICE_NAME=price_stream_consumer
    depends_on:
      - redis
      - price_stream_producer

  flower:
    build:
      context: .
      dockerfile: flower/Dockerfile
    command: celery -A worker.tasks flower --address=0.0.0.0 --port=5555
    volumes:
      - ./celery-services/worker:/app/worker
      - ./shared:/app/shared
      - ./config.yml:/app/config.yml
      - ./secrets.yml:/app/secrets.yml
    environment:
      - PYTHONPATH=/app
      - FLOWER_UNAUTHENTICATED_API=true
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery_worker

  prometheus:
    image: prom/prometheus:v2.47.2
    ports:
      - "9090:9090"
    volumes:
      - type: bind
        source: ./prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards

  mariadb:
    image: mariadb:10.11
    ports:
      - "3306:3306"
    environment:
      - MARIADB_ROOT_PASSWORD=secret
      - MARIADB_DATABASE=3t
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/mariadb.cnf:/etc/mysql/mariadb.conf.d/99-custom.cnf

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.15
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 5s
      retries: 12

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.15
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana-setup:
    image: curlimages/curl:8.4.0
    depends_on:
      - kibana
      - elasticsearch
    volumes:
      - ./setup/kibana:/setup
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 30 &&
        /setup/setup-index-patterns.sh
      "
    environment:
      - KIBANA_URL=http://kibana:5601
    restart: "no"

  jaeger:
    build: ./jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:14269/"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s
    depends_on:
      elasticsearch:
        condition: service_healthy

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    volumes:
      - ./otel-collector.yml:/etc/otel-collector.yml
    command: ["--config=/etc/otel-collector.yml"]
    ports:
      - "4317:4317"
      - "4318:4318"
    depends_on:
      jaeger:
        condition: service_healthy

  order-gateway:
    build:
      context: .
      dockerfile: components/Dockerfile
    command: python src/order_gateway.py
    ports:
      - "8002:8002"
    volumes:
      - ./components/src:/app/src
      - ./shared:/app/shared
      - ./config.yml:/app/config.yml
      - ./secrets.yml:/app/secrets.yml
    environment:
      - PYTHONPATH=/app
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_SERVICE_NAME=order-gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - mariadb
      - otel-collector

  exchange-observer:
    build:
      context: ./exchange-observer
    container_name: 3t_exchange_observer
    restart: unless-stopped
    environment:
      - OBSERVER_ID=local-observer-1
      - WALLET_ADDRESSES=0x6F87795cF1B94f1572c161E0633751C9e226f955,0x77dEe11bbF0Ad1143Bf008a84AE776557e2ebADE,0x30f1C7b7f904D7eA3460F7C359ecd6Fe93B96d12
    ports:
      - "8001:8001"
    volumes:
      - ./exchange-observer/data:/app/data

  # CORS proxy for bypassing IP restrictions on exchange APIs
  cors-proxy:
    image: redocly/cors-anywhere
    container_name: 3t_cors_proxy
    restart: unless-stopped
    environment:
      - CORSANYWHERE_WHITELIST=https://trisagion.finance
    ports:
      - "8080:8080"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  health-monitor:
    build:
      context: .
      dockerfile: health-monitor/Dockerfile
    depends_on:
      - mariadb
      - exchange-observer
    volumes:
      - ./health-monitor:/app
      - ./shared:/app/shared
      - ./config.yml:/app/config.yml
      - ./secrets.yml:/app/secrets.yml
      - ./exchange-observer/data:/app/data
    restart: unless-stopped




volumes:
  mariadb_data:
  jaeger_data:
  elasticsearch_data:
